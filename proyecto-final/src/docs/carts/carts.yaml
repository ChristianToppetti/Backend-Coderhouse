paths:
  /api/carts:
    post:
      summary: Create a new cart
      tags:
        - Cart
      responses:
          201:
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  $ref: '#/components/schemas/Cart'
  /api/carts/{cid}:
    get:
      summary: Get cart products by ID
      tags:
        - Cart
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
      responses:
          201:
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Product'
                  description: List of products
          500:
            description: Cart not found in database
    put:
      summary: Update cart products
      tags:
        - Cart
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  product:
                    required: true
                    type: string
                    description: Product ID
                  quantity:
                    type: number
                    description: Product quantity
              description: List of products
      responses:
          201:
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  $ref: '#/components/schemas/Cart'
          500:
            description: Cart not found in database
    delete:
      summary: Delete all cart products
      tags:
        - Cart
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
      responses:
          201:
            description: OK
          500:
            description: Cart not found in database
  /api/carts/{cid}/products/{pid}:
    post:
      summary: Add product to cart
      tags:
        - Cart
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
        - name: pid
          in: path
          required: true
          schema:
            type: string
      responses:
          201:
            description: OK
          403:
            description: You can't add a product from your own store
          500:
            description: Cart or product not found in database
    delete:
      summary: Remove product from cart
      tags:
        - Cart
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
        - name: pid
          in: path
          required: true
          schema:
            type: string
      responses:
          201:
            description: OK
          500:
            description: Cart or product not found in database
    put:
      summary: Add product with quantity
      tags:
        - Cart
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
        - name: pid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: number
                  description: Product quantity
      example:
        quantity: 20
      responses:
          201:
            description: OK
          400:
            description: Invalid quantity
          500:
            description: Cart or product not found in database  
  /api/carts/{cid}/purchase:
    get:
      summary: Purchase cart
      tags:
        - Cart
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
      responses:
          201:
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  $ref: '#/components/schemas/Ticket'
          500:
            description: Database error

components:
  schemas:
    Cart:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Product ID generated by MongoDB
        products:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Product'
          description: List of products
    Product:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Product ID generated by MongoDB
        title:
          type: string
          description: Product title
        code:
          type: string
          description: Product unique code
        price:
          type: mongoose.Decimal128
          description: Product price
        description:
          type: string
          description: Product description
        status:
          type: boolean
          description: Product status whether it is an active product or not
        stock:
          type: number
          description: Product stock
        thumbnail:
          type: string
          description: Product thumbnail
        category:
          type: string
          description: Product category
        owner:
          type: string
          description: Email of who created the product
    Purchaser:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Purchaser ID generated by MongoDB
        first_name:
          type: string
          description: First name
        last_name:
          type: string
          description: Last name
        email:
          type: string
          description: Email
        cart:
          type: string
          description: Cart ID
        role:
          type: string
    Ticket:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Ticket ID generated by MongoDB
        code:
          type: string
          description: Ticket code
        ammount:
          type: number
          description: Total price of products
        purchaser:
          type: object
          $ref: '#/components/schemas/Purchaser'
        products:
          type: array
          items:
            type: object
            properties:
              pid:
                type: object
                $ref: '#/components/schemas/Product'
              quantity:
                type: number
                description: Product quantity
  requestBodies:
    newProduct:
      type: object
      required: true
      properties:
        title:
          type: string
          description: Product title
        code:
          type: string
          description: Product unique code
        price:
          type: float
          description: Product price
        description:
          type: string
          description: Product description
        status:
          type: boolean
          description: Product status whether it is an active product or not
        stock:
          type: number
          description: Product stock
        thumbnail:
          type: string
          description: Product thumbnail
        category:
          type: string
          description: Product category
        owner:
          type: string
          description: Email of who created the product
      example:
        title: Product 1
        code: P001
        price: 100.2
        description: Product description
        status: true
        stock: 10
        thumbnail: ./images/product-1.png
        category: remeras
        owner: 2G3Rv@example.com   